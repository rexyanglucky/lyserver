{"version":3,"sources":["../../../../../src/webserver/pwa/step-06/scripts/app.js"],"names":["app","isLoading","visibleCards","selectedCities","spinner","document","querySelector","cardTemplate","container","addDialog","daysOfWeek","getElementById","addEventListener","updateForecasts","toggleAddDialog","select","selected","options","selectedIndex","key","value","label","textContent","getForecast","push","saveSelectedCities","visible","classList","add","remove","updateForecastCard","data","dataLastUpdated","Date","created","sunrise","channel","astronomy","sunset","current","item","condition","humidity","atmosphere","wind","card","cloneNode","removeAttribute","appendChild","cardLastUpdatedElem","cardLastUpdated","getTime","text","date","getIconClass","code","Math","round","temp","speed","direction","nextDays","querySelectorAll","today","getDay","i","nextDay","daily","forecast","high","low","setAttribute","statement","url","request","XMLHttpRequest","onreadystatechange","readyState","DONE","status","response","JSON","parse","results","query","initialWeatherForecast","open","send","keys","Object","forEach","stringify","localStorage","weatherCode","parseInt","city","navigator","serviceWorker","register","then","console","log"],"mappings":"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","file":"app.js","sourcesContent":["// Copyright 2016 Google Inc.\r\n// \r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n// \r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n// \r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\n\r\n(function() {\r\n  'use strict';\r\n\r\n  var app = {\r\n    isLoading: true,\r\n    visibleCards: {},\r\n    selectedCities: [],\r\n    spinner: document.querySelector('.loader'),\r\n    cardTemplate: document.querySelector('.cardTemplate'),\r\n    container: document.querySelector('.main'),\r\n    addDialog: document.querySelector('.dialog-container'),\r\n    daysOfWeek: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n  };\r\n\r\n\r\n  /*****************************************************************************\r\n   *\r\n   * Event listeners for UI elements\r\n   *\r\n   ****************************************************************************/\r\n\r\n  document.getElementById('butRefresh').addEventListener('click', function() {\r\n    // Refresh all of the forecasts\r\n    app.updateForecasts();\r\n  });\r\n\r\n  document.getElementById('butAdd').addEventListener('click', function() {\r\n    // Open/show the add new city dialog\r\n    app.toggleAddDialog(true);\r\n  });\r\n\r\n  document.getElementById('butAddCity').addEventListener('click', function() {\r\n    // Add the newly selected city\r\n    var select = document.getElementById('selectCityToAdd');\r\n    var selected = select.options[select.selectedIndex];\r\n    var key = selected.value;\r\n    var label = selected.textContent;\r\n    if (!app.selectedCities) {\r\n      app.selectedCities = [];\r\n    }\r\n    app.getForecast(key, label);\r\n    app.selectedCities.push({key: key, label: label});\r\n    app.saveSelectedCities();\r\n    app.toggleAddDialog(false);\r\n  });\r\n\r\n  document.getElementById('butAddCancel').addEventListener('click', function() {\r\n    // Close the add new city dialog\r\n    app.toggleAddDialog(false);\r\n  });\r\n\r\n\r\n  /*****************************************************************************\r\n   *\r\n   * Methods to update/refresh the UI\r\n   *\r\n   ****************************************************************************/\r\n\r\n  // Toggles the visibility of the add new city dialog.\r\n  app.toggleAddDialog = function(visible) {\r\n    if (visible) {\r\n      app.addDialog.classList.add('dialog-container--visible');\r\n    } else {\r\n      app.addDialog.classList.remove('dialog-container--visible');\r\n    }\r\n  };\r\n\r\n  // Updates a weather card with the latest weather forecast. If the card\r\n  // doesn't already exist, it's cloned from the template.\r\n  app.updateForecastCard = function(data) {\r\n    var dataLastUpdated = new Date(data.created);\r\n    var sunrise = data.channel.astronomy.sunrise;\r\n    var sunset = data.channel.astronomy.sunset;\r\n    var current = data.channel.item.condition;\r\n    var humidity = data.channel.atmosphere.humidity;\r\n    var wind = data.channel.wind;\r\n\r\n    var card = app.visibleCards[data.key];\r\n    if (!card) {\r\n      card = app.cardTemplate.cloneNode(true);\r\n      card.classList.remove('cardTemplate');\r\n      card.querySelector('.location').textContent = data.label;\r\n      card.removeAttribute('hidden');\r\n      app.container.appendChild(card);\r\n      app.visibleCards[data.key] = card;\r\n    }\r\n\r\n    // Verifies the data provide is newer than what's already visible\r\n    // on the card, if it's not bail, if it is, continue and update the\r\n    // time saved in the card\r\n    var cardLastUpdatedElem = card.querySelector('.card-last-updated');\r\n    var cardLastUpdated = cardLastUpdatedElem.textContent;\r\n    if (cardLastUpdated) {\r\n      cardLastUpdated = new Date(cardLastUpdated);\r\n      // Bail if the card has more recent data then the data\r\n      if (dataLastUpdated.getTime() < cardLastUpdated.getTime()) {\r\n        return;\r\n      }\r\n    }\r\n    cardLastUpdatedElem.textContent = data.created;\r\n\r\n    card.querySelector('.description').textContent = current.text;\r\n    card.querySelector('.date').textContent = current.date;\r\n    card.querySelector('.current .icon').classList.add(app.getIconClass(current.code));\r\n    card.querySelector('.current .temperature .value').textContent =\r\n      Math.round(current.temp);\r\n    card.querySelector('.current .sunrise').textContent = sunrise;\r\n    card.querySelector('.current .sunset').textContent = sunset;\r\n    card.querySelector('.current .humidity').textContent =\r\n      Math.round(humidity) + '%';\r\n    card.querySelector('.current .wind .value').textContent =\r\n      Math.round(wind.speed);\r\n    card.querySelector('.current .wind .direction').textContent = wind.direction;\r\n    var nextDays = card.querySelectorAll('.future .oneday');\r\n    var today = new Date();\r\n    today = today.getDay();\r\n    for (var i = 0; i < 7; i++) {\r\n      var nextDay = nextDays[i];\r\n      var daily = data.channel.item.forecast[i];\r\n      if (daily && nextDay) {\r\n        nextDay.querySelector('.date').textContent =\r\n          app.daysOfWeek[(i + today) % 7];\r\n        nextDay.querySelector('.icon').classList.add(app.getIconClass(daily.code));\r\n        nextDay.querySelector('.temp-high .value').textContent =\r\n          Math.round(daily.high);\r\n        nextDay.querySelector('.temp-low .value').textContent =\r\n          Math.round(daily.low);\r\n      }\r\n    }\r\n    if (app.isLoading) {\r\n      app.spinner.setAttribute('hidden', true);\r\n      app.container.removeAttribute('hidden');\r\n      app.isLoading = false;\r\n    }\r\n  };\r\n\r\n\r\n  /*****************************************************************************\r\n   *\r\n   * Methods for dealing with the model\r\n   *\r\n   ****************************************************************************/\r\n\r\n  /*\r\n   * Gets a forecast for a specific city and updates the card with the data.\r\n   * getForecast() first checks if the weather data is in the cache. If so,\r\n   * then it gets that data and populates the card with the cached data.\r\n   * Then, getForecast() goes to the network for fresh data. If the network\r\n   * request goes through, then the card gets updated a second time with the\r\n   * freshest data.\r\n   */\r\n  app.getForecast = function(key, label) {\r\n    var statement = 'select * from weather.forecast where woeid=' + key;\r\n    var url = 'https://query.yahooapis.com/v1/public/yql?format=json&q=' +\r\n        statement;\r\n    // TODO add cache logic here\r\n\r\n    // Fetch the latest data.\r\n    var request = new XMLHttpRequest();\r\n    request.onreadystatechange = function() {\r\n      if (request.readyState === XMLHttpRequest.DONE) {\r\n        if (request.status === 200) {\r\n          var response = JSON.parse(request.response);\r\n          var results = response.query.results;\r\n          results.key = key;\r\n          results.label = label;\r\n          results.created = response.query.created;\r\n          app.updateForecastCard(results);\r\n        }\r\n      } else {\r\n        // Return the initial weather forecast since no data is available.\r\n        app.updateForecastCard(initialWeatherForecast);\r\n      }\r\n    };\r\n    request.open('GET', url);\r\n    request.send();\r\n  };\r\n\r\n  // Iterate all of the cards and attempt to get the latest forecast data\r\n  app.updateForecasts = function() {\r\n    var keys = Object.keys(app.visibleCards);\r\n    keys.forEach(function(key) {\r\n      app.getForecast(key);\r\n    });\r\n  };\r\n\r\n  // TODO add saveSelectedCities function here\r\n  // Save list of cities to localStorage.\r\n  app.saveSelectedCities = function() {\r\n    var selectedCities = JSON.stringify(app.selectedCities);\r\n    localStorage.selectedCities = selectedCities;\r\n  };\r\n\r\n  app.getIconClass = function(weatherCode) {\r\n    // Weather codes: https://developer.yahoo.com/weather/documentation.html#codes\r\n    weatherCode = parseInt(weatherCode);\r\n    switch (weatherCode) {\r\n      case 25: // cold\r\n      case 32: // sunny\r\n      case 33: // fair (night)\r\n      case 34: // fair (day)\r\n      case 36: // hot\r\n      case 3200: // not available\r\n        return 'clear-day';\r\n      case 0: // tornado\r\n      case 1: // tropical storm\r\n      case 2: // hurricane\r\n      case 6: // mixed rain and sleet\r\n      case 8: // freezing drizzle\r\n      case 9: // drizzle\r\n      case 10: // freezing rain\r\n      case 11: // showers\r\n      case 12: // showers\r\n      case 17: // hail\r\n      case 35: // mixed rain and hail\r\n      case 40: // scattered showers\r\n        return 'rain';\r\n      case 3: // severe thunderstorms\r\n      case 4: // thunderstorms\r\n      case 37: // isolated thunderstorms\r\n      case 38: // scattered thunderstorms\r\n      case 39: // scattered thunderstorms (not a typo)\r\n      case 45: // thundershowers\r\n      case 47: // isolated thundershowers\r\n        return 'thunderstorms';\r\n      case 5: // mixed rain and snow\r\n      case 7: // mixed snow and sleet\r\n      case 13: // snow flurries\r\n      case 14: // light snow showers\r\n      case 16: // snow\r\n      case 18: // sleet\r\n      case 41: // heavy snow\r\n      case 42: // scattered snow showers\r\n      case 43: // heavy snow\r\n      case 46: // snow showers\r\n        return 'snow';\r\n      case 15: // blowing snow\r\n      case 19: // dust\r\n      case 20: // foggy\r\n      case 21: // haze\r\n      case 22: // smoky\r\n        return 'fog';\r\n      case 24: // windy\r\n      case 23: // blustery\r\n        return 'windy';\r\n      case 26: // cloudy\r\n      case 27: // mostly cloudy (night)\r\n      case 28: // mostly cloudy (day)\r\n      case 31: // clear (night)\r\n        return 'cloudy';\r\n      case 29: // partly cloudy (night)\r\n      case 30: // partly cloudy (day)\r\n      case 44: // partly cloudy\r\n        return 'partly-cloudy-day';\r\n    }\r\n  };\r\n\r\n  /*\r\n   * Fake weather data that is presented when the user first uses the app,\r\n   * or when the user has not saved any cities. See startup code for more\r\n   * discussion.\r\n   */\r\n  var initialWeatherForecast = {\r\n    key: '2459115',\r\n    label: 'New York, NY',\r\n    created: '2016-07-22T01:00:00Z',\r\n    channel: {\r\n      astronomy: {\r\n        sunrise: \"5:43 am\",\r\n        sunset: \"8:21 pm\"\r\n      },\r\n      item: {\r\n        condition: {\r\n          text: \"Windy\",\r\n          date: \"Thu, 21 Jul 2016 09:00 PM EDT\",\r\n          temp: 56,\r\n          code: 24\r\n        },\r\n        forecast: [\r\n          {code: 44, high: 86, low: 70},\r\n          {code: 44, high: 94, low: 73},\r\n          {code: 4, high: 95, low: 78},\r\n          {code: 24, high: 75, low: 89},\r\n          {code: 24, high: 89, low: 77},\r\n          {code: 44, high: 92, low: 79},\r\n          {code: 44, high: 89, low: 77}\r\n        ]\r\n      },\r\n      atmosphere: {\r\n        humidity: 56\r\n      },\r\n      wind: {\r\n        speed: 25,\r\n        direction: 195\r\n      }\r\n    }\r\n  };\r\n  // TODO uncomment line below to test app with fake data\r\n  // app.updateForecastCard(initialWeatherForecast);\r\n\r\n  /************************************************************************\r\n   *\r\n   * Code required to start the app\r\n   *\r\n   * NOTE: To simplify this codelab, we've used localStorage.\r\n   *   localStorage is a synchronous API and has serious performance\r\n   *   implications. It should not be used in production applications!\r\n   *   Instead, check out IDB (https://www.npmjs.com/package/idb) or\r\n   *   SimpleDB (https://gist.github.com/inexorabletash/c8069c042b734519680c)\r\n   ************************************************************************/\r\n\r\n  // TODO add startup code here\r\n  app.selectedCities = localStorage.selectedCities;\r\n  if (app.selectedCities) {\r\n    app.selectedCities = JSON.parse(app.selectedCities);\r\n    app.selectedCities.forEach(function(city) {\r\n      app.getForecast(city.key, city.label);\r\n    });\r\n  } else {\r\n    /* The user is using the app for the first time, or the user has not\r\n     * saved any cities, so show the user some fake data. A real app in this\r\n     * scenario could guess the user's location via IP lookup and then inject\r\n     * that data into the page.\r\n     */\r\n    app.updateForecastCard(initialWeatherForecast);\r\n    app.selectedCities = [\r\n      {key: initialWeatherForecast.key, label: initialWeatherForecast.label}\r\n    ];\r\n    app.saveSelectedCities();\r\n  }\r\n\r\n  // TODO add service worker code here\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker\r\n             .register('./service-worker.js')\r\n             .then(function() { console.log('Service Worker Registered'); });\r\n  }\r\n})();\r\n"]}