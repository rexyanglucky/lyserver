{"version":3,"sources":["../../src/db/mongo.js"],"names":["DB_CONN_STR","MongodbHelper","constructor","Connect","callback","console","log","connect","err","db","result","cb","close","InsertDB","collectionName","data","c","completeCallback","collection","insert","error","DeleteDB","query","remove","UpdateDB","update","QueryDB","find","sort","updateTime","limit","toArray","QueryDBList"],"mappings":"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","file":"mongo.js","sourcesContent":["/*\r\n author:mongo helper\r\n*/\r\nimport { MongoClient } from 'mongodb';\r\nconst DB_CONN_STR = 'mongodb://localhost:27017/lyapp';\r\nclass MongodbHelper {\r\n    constructor() {\r\n        // console.log(MongoClient);\r\n    }\r\n    /**\r\n     * 连接数据库\r\n     * @param {callback} callback \r\n     */\r\n    Connect(callback) {\r\n        console.log(\"start connect\");\r\n        MongoClient.connect(DB_CONN_STR, (err, db) => {\r\n            console.log(\"connected\");\r\n            //调用业务处理逻辑，并将处理结果回调，关闭连接\r\n            callback(db, (err, result, cb) => {\r\n                db.close();\r\n                if (err) {\r\n                    console.log(\"Error:\" + err);\r\n                }\r\n                else {\r\n                    console.log(result);\r\n                }\r\n                if (cb) {\r\n                    cb(result);\r\n                }\r\n\r\n\r\n            });\r\n        })\r\n    }\r\n    /**\r\n     * 插入数据\r\n     * @param {*} param0 \r\n     */\r\n    InsertDB({ collectionName, data, callback }) {\r\n        function c(db, completeCallback) {\r\n            if (collectionName && data) {\r\n                let collection = db.collection(collectionName);\r\n                collection.insert(data, (err, result) => {\r\n                    //插入成功回调\r\n                    if (err) {\r\n                        completeCallback(err, result, callback);\r\n                    }\r\n                    else {\r\n                        completeCallback(err, result, callback);\r\n                        console.log(\"insert successful\");\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                console.error(\"collectionName is unvlidate\");\r\n            }\r\n        }\r\n        this.Connect(c);\r\n    }\r\n    /**\r\n     * 删除数据\r\n     * @param {*} param0 \r\n     */\r\n    DeleteDB({ collectionName, query = \"\", callback }) {\r\n        function c(db, completeCallback) {\r\n            if (collectionName && query) {\r\n                let collection = db.collection(collectionName);\r\n                collection.remove(query, (err, result) => {\r\n                    ////删除成功回调\r\n                    if (err) {\r\n                        completeCallback(err, result, callback);\r\n                    }\r\n                    else {\r\n                        completeCallback(err, result, callback);\r\n                        console.log(\"Delete successful\");\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                console.error(\"collectionName is unvlidate\");\r\n            }\r\n        }\r\n        this.Connect(c);\r\n\r\n    }\r\n    /**\r\n   * 更改数据\r\n   * @param {*} param0 \r\n   */\r\n    UpdateDB({ collectionName, data, query = \"\", callback }) {\r\n        function c(db, completeCallback) {\r\n            if (collectionName && data) {\r\n                let collection = db.collection(collectionName);\r\n                collection.update(query, data, (err, result) => {\r\n                    //插入成功回调\r\n                    if (err) {\r\n                        completeCallback(err, result, callback);\r\n                    }\r\n                    else {\r\n                        completeCallback(err, result, callback);\r\n                        console.log(\"update successful\");\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                console.error(\"collectionName is unvlidate\");\r\n            }\r\n        }\r\n        this.Connect(c);\r\n    }\r\n    /**\r\n     * 查询数据\r\n     * @param {*} param0 \r\n     */\r\n    QueryDB({ collectionName, query, callback }) {\r\n        function c(db, completeCallback) {\r\n            if (collectionName && query) {\r\n                let collection = db.collection(collectionName);\r\n                collection.find(query).sort({updateTime:1}).limit.toArray((err, result) => {\r\n                    ////查询成功回调\r\n                    if (err) {\r\n                        completeCallback(err, result, callback);\r\n                    }\r\n                    else {\r\n                        completeCallback(err, result, callback);\r\n                        console.log(\"query successful\");\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                console.error(\"collectionName is unvlidate\");\r\n            }\r\n        }\r\n        this.Connect(c);\r\n\r\n    }\r\n      /**\r\n     * 查询数据\r\n     * @param {*} param0 \r\n     */\r\n    QueryDBList({ collectionName, query, callback }) {\r\n        function c(db, completeCallback) {\r\n            if (collectionName && query) {\r\n                let collection = db.collection(collectionName);\r\n                collection.find(query).sort({updateTime:1}).limit.toArray((err, result) => {\r\n                    ////查询成功回调\r\n                    if (err) {\r\n                        completeCallback(err, result, callback);\r\n                    }\r\n                    else {\r\n                        completeCallback(err, result, callback);\r\n                        console.log(\"query successful\");\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                console.error(\"collectionName is unvlidate\");\r\n            }\r\n        }\r\n        this.Connect(c);\r\n\r\n    }\r\n}\r\nexport default MongodbHelper;\r\n//#region test\r\n// var m = new MongodbHelper();\r\n// m.InsertDB(\"abc\",\"abc\");\r\n//  m.DeleteDB({ collectionName: \"abc\", query: { content: 'update' } });\r\n// m.InsertDB({\r\n//     collectionName: \"abc\", data: [{ name: \"frist\", content: \"1124524545\" },\r\n//     { name: \"frist\", content: \"1124524545\" },\r\n//     { name: \"frist\", content: \"1124524545\" },\r\n//     { name: \"frist\", content: \"1124524545\" }]\r\n// });\r\n\r\n// m.QueryDB({ collectionName: \"abc\", query: { name: 'frist' } });\r\n// m.UpdateDB({ collectionName: \"abc\", data: [{ $set: { content: \"update\" } }], query: {} });\r\n//#endregion\r\n"]}