{"version":3,"sources":["../../src/db/mongo.js"],"names":["DB_CONN_STR","MongodbHelper","constructor","Connect","successCallBack","errCallBack","console","log","MongoClient","connect","err","db","result","cb","close","e","InsertDB","collectionName","data","callback","c","completeCallback","collection","insert","error","DeleteDB","query","remove","UpdateDB","update","QueryDB","projection","limit","skip","find","sort","updateTime","toArray","QueryDBList"],"mappings":"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","file":"mongo.js","sourcesContent":["/*\r\n author:mongo helper\r\n*/\r\nimport { MongoClient } from 'mongodb';\r\n// const DB_CONN_STR = 'mongodb://localhost:27017/lyapp';\r\n// const DB_CONN_STR = 'mongodb://rex:rex123@127.0.0.1:27017/lyapp';\r\nconst DB_CONN_STR = 'mongodb://rex:rex123@47.96.6.140:27017/lyapp';\r\n\r\nclass MongodbHelper {\r\n    constructor() {\r\n        // console.log(MongoClient);\r\n    }\r\n\r\n    /**\r\n     * 连接数据库\r\n     * @param {successCallBack} successCallBack 连接成功回调\r\n     * @param {errCallBack} errCallBack         连接失败回调\r\n     */\r\n    Connect(successCallBack, errCallBack) {\r\n        console.log(\"start connect\");\r\n        MongoClient.connect(DB_CONN_STR, (err, db) => {\r\n            if (err) {\r\n                console.log(\"connect failed\");\r\n                errCallBack && errCallBack(err);\r\n            }\r\n            else {\r\n                console.log(\"connected\");\r\n                //调用业务处理逻辑，并将处理结果回调，关闭连接\r\n                try {\r\n                    successCallBack(db, (err, result, cb) => {\r\n                        db.close();\r\n                        if (err) {\r\n                            console.log(\"Error:\" + err);\r\n                            cb && cb(err)\r\n                        }\r\n                        else {\r\n                            cb && cb(result);\r\n                        }\r\n                    });\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                }\r\n            }\r\n        })\r\n\r\n    }\r\n    /**\r\n     * 插入数据\r\n     * @param {*} param0 \r\n     */\r\n    InsertDB({ collectionName, data, callback }) {\r\n        function c(db, completeCallback) {\r\n            if (collectionName && data) {\r\n                let collection = db.collection(collectionName);\r\n                collection.insert(data, (err, result) => {\r\n                    //插入成功回调\r\n                    if (err) {\r\n                        completeCallback(err, result, callback);\r\n                    }\r\n                    else {\r\n                        completeCallback(err, result, callback);\r\n                        console.log(\"insert successful\");\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                console.error(\"collectionName is unvlidate\");\r\n            }\r\n        }\r\n        //前台传递过来的回调函数，用于将连接异常返回给前台\r\n        this.Connect(c, callback);\r\n    }\r\n    /**\r\n     * 删除数据\r\n     * @param {*} param0 \r\n     */\r\n    DeleteDB({ collectionName, query = \"\", callback }) {\r\n        function c(db, completeCallback) {\r\n            if (collectionName && query) {\r\n                let collection = db.collection(collectionName);\r\n                collection.remove(query, (err, result) => {\r\n                    ////删除成功回调\r\n                    if (err) {\r\n                        completeCallback(err, result, callback);\r\n                    }\r\n                    else {\r\n                        completeCallback(err, result, callback);\r\n                        console.log(\"Delete successful\");\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                console.error(\"collectionName is unvlidate\");\r\n            }\r\n        }\r\n        this.Connect(c, callback);\r\n\r\n    }\r\n    /**\r\n   * 更改数据\r\n   * @param {*} param0 \r\n   */\r\n    UpdateDB({ collectionName, data, query = \"\", callback }) {\r\n        function c(db, completeCallback) {\r\n            if (collectionName && data) {\r\n                let collection = db.collection(collectionName);\r\n                collection.update(query, data, (err, result) => {\r\n                    //插入成功回调\r\n                    if (err) {\r\n                        completeCallback(err, result, callback);\r\n                    }\r\n                    else {\r\n                        completeCallback(err, result, callback);\r\n                        console.log(\"update successful\");\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                console.error(\"collectionName is unvlidate\");\r\n            }\r\n        }\r\n        this.Connect(c, callback);\r\n    }\r\n    /**\r\n     * 查询数据\r\n     * @param {*} param0 \r\n     */\r\n    QueryDB({ collectionName, query, projection, callback, limit = 1000, skip = 0 }) {\r\n        function c(db, completeCallback) {\r\n            if (collectionName && query) {\r\n                let collection = db.collection(collectionName);\r\n                collection.find(query, projection).sort({ updateTime: -1 }).limit(limit).skip(skip).toArray((err, result) => {\r\n                    ////查询成功回调\r\n                    if (err) {\r\n                        completeCallback(err, result, callback);\r\n                    }\r\n                    else {\r\n                        completeCallback(err, result, callback);\r\n                        console.log(\"query successful\");\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                console.error(\"collectionName is unvlidate\");\r\n            }\r\n        }\r\n        this.Connect(c, callback);\r\n\r\n    }\r\n    /**\r\n   * 查询数据\r\n   * @param {*} param0 \r\n   */\r\n    QueryDBList({ collectionName, query, callback }) {\r\n        function c(db, completeCallback) {\r\n            if (collectionName && query) {\r\n                let collection = db.collection(collectionName);\r\n                collection.find(query).sort({ updateTime: 1 }).toArray((err, result) => {\r\n                    ////查询成功回调\r\n                    if (err) {\r\n                        completeCallback(err, result, callback);\r\n                    }\r\n                    else {\r\n                        completeCallback(err, result, callback);\r\n                        console.log(\"query successful\");\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                console.error(\"collectionName is unvlidate\");\r\n            }\r\n        }\r\n        this.Connect(c, callback);\r\n\r\n    }\r\n}\r\nexport default MongodbHelper;\r\n//#region test\r\n// var m = new MongodbHelper();\r\n// m.InsertDB(\"abc\",\"abc\");\r\n//  m.DeleteDB({ collectionName: \"abc\", query: { content: 'update' } });\r\n// m.InsertDB({\r\n//     collectionName: \"abc\", data: [{ name: \"frist\", content: \"1124524545\" },\r\n//     { name: \"frist\", content: \"1124524545\" },\r\n//     { name: \"frist\", content: \"1124524545\" },\r\n//     { name: \"frist\", content: \"1124524545\" }]\r\n// });\r\n\r\n// m.QueryDB({ collectionName: \"abc\", query: { name: 'frist' } });\r\n// m.UpdateDB({ collectionName: \"abc\", data: [{ $set: { content: \"update\" } }], query: {} });\r\n//#endregion\r\n"]}