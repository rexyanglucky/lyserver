{"version":3,"sources":["../../src/common/file.js"],"names":["FileHelper","constructor","WriteFile","Content","filename","encode","self","Promise","resolve","reject","p","__dirname","stream","createWriteStream","write","end","on","console","log","fileUrl","err","stack"],"mappings":"2EAAA,wB;AACA,4B;AACA,gC;;AAEA,MAAMA,UAAN,CAAiB;AACbC,kBAAc;;AAEb;AACD;AACA;;;;AAIA,WAAOC,SAAP,CAAiB,EAAEC,OAAF,EAAWC,QAAX,EAAqBC,SAAS,MAA9B,EAAjB,EAAyD;AACrD,YAAIC,OAAO,IAAX;AACA,eAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,gBAAIC,IAAI,eAAKF,OAAL,CAAaG,SAAb,EAAwB,yBAAxB,EAAmDP,QAAnD,CAAR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA,gBAAIQ,SAAS,aAAGC,iBAAH,CAAqBH,CAArB,CAAb;AACAE,mBAAOE,KAAP,CAAaX,OAAb;;AAEA;AACAS,mBAAOG,GAAP;AACAH,mBAAOI,EAAP,CAAU,QAAV,EAAoB,YAAY;AAC5BC,wBAAQC,GAAR,CAAY,cAAZ;AACA,oBAAIC,UAAU,eAAe,GAAf,GAAqBf,QAAnC;AACAI,wBAAQW,OAAR;AACH,aAJD;AAKAP,mBAAOI,EAAP,CAAU,OAAV,EAAmB,UAAUI,GAAV,EAAe,CAAEH,QAAQC,GAAR,CAAYE,IAAIC,KAAhB,EAAwBZ,OAAOW,GAAP,EAAc,CAA1E;AACH,SA3BM,CAAP;AA4BH,KAvCY,C;;;AA0CFpB,U;;AAEf","file":"file.js","sourcesContent":["import fs from \"fs\";\r\nimport path, { resolve } from 'path';\r\nimport { Buffer } from \"buffer\";\r\n\r\nclass FileHelper {\r\n    constructor() {\r\n\r\n    }\r\n    // static cdn() { return '//192.168.7.171:8001'; }\r\n    /**\r\n     * 保存文件 返回promise\r\n     * @param {content, filename, encode = 'UTF8'} param0 \r\n     */\r\n    static WriteFile({ Content, filename, encode = 'UTF8' }) {\r\n        let self = this;\r\n        return new Promise((resolve, reject) => {\r\n            let p = path.resolve(__dirname, '../webserver/uploadFile', filename);\r\n            // let buff=Buffer.from(Content,'utf8');\r\n            // fs.writeFile(p,buff, (err) => {\r\n            //     if(err){reject(err);return;}\r\n            //     let fileUrl = self.cdn() + '/' + 'uploadFile' + '/' + filename;\r\n            //     resolve(fileUrl);\r\n            // })\r\n            // stream.bytesWritten\r\n            // var realContent;\r\n            // if ((typeof Content) === \"string\") {\r\n            //     realContent = Buffer.from(Content, 'UTF8')\r\n            // }\r\n            // else {\r\n                // realContent = Content;\r\n            // }\r\n            let stream = fs.createWriteStream(p);\r\n            stream.write(Content);\r\n            \r\n            // stream.write(Con)\r\n            stream.end();\r\n            stream.on(\"finish\", function () {\r\n                console.log('write finish');\r\n                let fileUrl = 'uploadFile' + '/' + filename;\r\n                resolve(fileUrl);\r\n            })\r\n            stream.on(\"error\", function (err) { console.log(err.stack); reject(err); })\r\n        })\r\n    }\r\n\r\n}\r\nexport default FileHelper;\r\n\r\n// FileHelper.WriteFile({Content:'123',filename:'tt.png',encode:'UTF8'}).then((f)=>{console.log(f)});"]}