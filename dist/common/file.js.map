{"version":3,"sources":["../../src/common/file.js"],"names":["FileHelper","constructor","WriteFile","Content","filename","encode","self","Promise","resolve","reject","fs","existsSync","path","__dirname","mkdirSync","p","stream","createWriteStream","write","end","on","console","log","fileUrl","err"],"mappings":"2EAAA,wB;AACA,4B;AACA,gC;;AAEA,MAAMA,UAAN,CAAiB;AACbC,kBAAc;;AAEb;AACD;AACA;;;;AAIA,WAAOC,SAAP,CAAiB,EAAEC,OAAF,EAAWC,QAAX,EAAqBC,SAAS,MAA9B,EAAjB,EAAyD;AACrD,YAAIC,OAAO,IAAX;AACA,eAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,gBAAI;AACA,oBAAI,CAACC,aAAGC,UAAH,CAAcC,eAAKJ,OAAL,CAAaK,SAAb,EAAwB,yBAAxB,CAAd,CAAL,EAAwE;AACpEH,iCAAGI,SAAH,CAAaF,eAAKJ,OAAL,CAAaK,SAAb,EAAwB,yBAAxB,CAAb;AACH;AACD,oBAAIE,IAAIH,eAAKJ,OAAL,CAAaK,SAAb,EAAwB,yBAAxB,EAAmDT,QAAnD,CAAR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAIY,SAASN,aAAGO,iBAAH,CAAqBF,CAArB,CAAb;AACAC,uBAAOE,KAAP,CAAaf,OAAb;;AAEA;AACAa,uBAAOG,GAAP;AACAH,uBAAOI,EAAP,CAAU,QAAV,EAAoB,YAAY;AAC5BC,4BAAQC,GAAR,CAAY,cAAZ;AACA,wBAAIC,UAAU,eAAe,GAAf,GAAqBnB,QAAnC;AACAI,4BAAQe,OAAR;AACH,iBAJD;AAKAP,uBAAOI,EAAP,CAAU,OAAV,EAAmB,UAAUI,GAAV,EAAe,CAAEf,OAAOe,GAAP,EAAc,CAAlD;AACH,aA9BD,CA8BE,OAAOA,GAAP,EAAY;AACVf,uBAAOe,GAAP;AACH;AACJ,SAlCM,CAAP;AAmCH,KA9CY,C;;;AAiDFxB,U;;AAEf","file":"file.js","sourcesContent":["import fs from \"fs\";\r\nimport path, { resolve } from 'path';\r\nimport { Buffer } from \"buffer\";\r\n\r\nclass FileHelper {\r\n    constructor() {\r\n\r\n    }\r\n    // static cdn() { return '//192.168.7.171:8001'; }\r\n    /**\r\n     * 保存文件 返回promise\r\n     * @param {content, filename, encode = 'UTF8'} param0 \r\n     */\r\n    static WriteFile({ Content, filename, encode = 'UTF8' }) {\r\n        let self = this;\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                if (!fs.existsSync(path.resolve(__dirname, '../webserver/uploadFile'))) {\r\n                    fs.mkdirSync(path.resolve(__dirname, '../webserver/uploadFile'));\r\n                }\r\n                let p = path.resolve(__dirname, '../webserver/uploadFile', filename);\r\n                // let buff=Buffer.from(Content,'utf8');\r\n                // fs.writeFile(p,buff, (err) => {\r\n                //     if(err){reject(err);return;}\r\n                //     let fileUrl = self.cdn() + '/' + 'uploadFile' + '/' + filename;\r\n                //     resolve(fileUrl);\r\n                // })\r\n                // stream.bytesWritten\r\n                // var realContent;\r\n                // if ((typeof Content) === \"string\") {\r\n                //     realContent = Buffer.from(Content, 'UTF8')\r\n                // }\r\n                // else {\r\n                // realContent = Content;\r\n                // }\r\n                let stream = fs.createWriteStream(p);\r\n                stream.write(Content);\r\n\r\n                // stream.write(Con)\r\n                stream.end();\r\n                stream.on(\"finish\", function () {\r\n                    console.log('write finish');\r\n                    let fileUrl = 'uploadFile' + '/' + filename;\r\n                    resolve(fileUrl);\r\n                })\r\n                stream.on(\"error\", function (err) { reject(err); })\r\n            } catch (err) {\r\n                reject(err);\r\n            }\r\n        })\r\n    }\r\n\r\n}\r\nexport default FileHelper;\r\n\r\n// FileHelper.WriteFile({Content:'123',filename:'tt.png',encode:'UTF8'}).then((f)=>{console.log(f)});"]}