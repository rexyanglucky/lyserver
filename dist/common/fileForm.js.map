{"version":3,"sources":["../../src/common/fileForm.js"],"names":["CONTENT_DISPOSITION","ENTER_STR","FILENAME","FORMNAME","NEWLINE","NEWLINEONE","Content_Disposition_Byte","Buffer","from","NEWLINE_BYTE","NEWLINEONE_BYTE","FileForm","prototype","IndexOfExt","sub_buf","start_index","src_buf","isBuffer","src_len","length","sub_len","idx","isNaN","i","c","j","skip","Array","k","GetFromList","data","req","boundaryArr","headers","split","boundary","boundaryByte","scanIndex","objList","findIndex","descEnd","desc","toString","obj","name","filename","Content","reg","replace","matchstr","contentDisposition","filenameValue","fileType","starIndex","sourceString","realDataEnd","realDataLength","realDataByte","alloc","copy","push","module","exports"],"mappings":"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","file":"fileForm.js","sourcesContent":["const CONTENT_DISPOSITION = \"Content-Disposition\";\r\nconst ENTER_STR = \"Content-Disposition\";\r\nconst FILENAME = \"filename\";\r\nconst FORMNAME = \"name=\";\r\nconst NEWLINE = \"\\r\\n\\r\\n\";\r\nconst NEWLINEONE = \"\\r\\n\";\r\nlet Content_Disposition_Byte = Buffer.from(CONTENT_DISPOSITION, 'utf8');\r\nlet NEWLINE_BYTE = Buffer.from(NEWLINE, 'utf8');\r\nlet NEWLINEONE_BYTE = Buffer.from(NEWLINEONE, 'utf8');\r\nfunction FileForm() {\r\n\r\n}\r\n/*\r\nHorspool 算法实现的快速子串匹配，这里用于在大Buffer中查找小Buffer\r\nsrc_buf =大Buffer,  sub_buf=要找的小Buffer, start_index=起始位置，默认为0\r\n*/\r\n\r\nBuffer.prototype.IndexOfExt = function (sub_buf, start_index) {\r\n    let src_buf = this;\r\n    if (!Buffer.isBuffer(src_buf) || !Buffer.isBuffer(sub_buf)) return -1;\r\n\r\n    var src_len = src_buf.length, sub_len = sub_buf.length, idx = start_index - 0;\r\n\r\n    if (isNaN(idx) || idx < 0) idx = 0; // default\r\n\r\n    if (src_len == 0 || sub_len == 0 || idx + sub_len > src_len) return -1;\r\n\r\n    // 如果只是查找单个字符\r\n    if (sub_len == 1) {\r\n        for (var i = idx, c = sub_buf[0]; i < src_len; i++)\r\n            if (src_buf[i] == c) return i;\r\n        return -1;\r\n    }\r\n\r\n    // 如果只是比较 src_buf 的尾部是否与 sub_buf 相等\r\n    if (idx + sub_len == src_len) {\r\n        var i = idx + sub_len - 1;\r\n        var j = sub_len - 1;\r\n        for (; j > -1 && src_buf[i] == sub_buf[j]; j-- , i--);\r\n        return (j == -1) ? idx : -1;\r\n    }\r\n\r\n    // Horspool 搜索算法\r\n    var skip = new Array(256);     // 构造跳转表\r\n    for (var i = 0; i < 256; i++) skip[i] = sub_len;\r\n    for (var i = 0; i < sub_len - 1; i++) skip[sub_buf[i]] = sub_len - i - 1;\r\n\r\n    for (var k = idx + sub_len - 1; k < src_len; k += skip[src_buf[k]]) {\r\n        var i = k;\r\n        var j = sub_len - 1;\r\n        for (; j > -1 && src_buf[i] == sub_buf[j]; j-- , i--); // 回溯比较\r\n        if (j == -1) return i + 1;\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n  * \r\n  * @param {Buffer} data 接收到的post数据 \r\n  * @param {httpRequest} req  \r\n  */\r\nFileForm.GetFromList = function (data, req) {\r\n    let boundaryArr = req.headers['content-type'].split(';')[1].split('=');\r\n    let boundary = '--' + boundaryArr[1];\r\n    let boundaryByte = Buffer.from(boundary, 'utf8');\r\n    let scanIndex = 0;\r\n    let objList = new Array();\r\n    while (scanIndex < data.length) {\r\n        let findIndex = data.IndexOfExt(boundaryByte, scanIndex);\r\n        //查找到boundary\r\n        if (findIndex > -1) {\r\n            //boundary 前已无内容要处理\r\n            if (findIndex - scanIndex == 0) {\r\n                //查找当前 Content-Disposition\r\n                findIndex = data.IndexOfExt(Content_Disposition_Byte, scanIndex);\r\n                if (findIndex > -1) {\r\n                    let descEnd = data.IndexOfExt(NEWLINE_BYTE, findIndex);\r\n                    let desc = data.toString('utf8', findIndex, descEnd);\r\n                    findIndex = descEnd;\r\n                    let obj = { name: null, 'Content-Disposition': null, filename: null, 'Content-Type': null, Content: null };\r\n                    let reg = /Content-Disposition: (form-data); name=\"(\\S+)\"(?:; (filename)=\"(\\S+[.]\\S{3,4})\"\\s+Content-Type: (\\S+))?/gi\r\n                    desc.replace(reg, function (matchstr, contentDisposition, name, filename, filenameValue, fileType, starIndex, sourceString) {\r\n                        obj.name = name;\r\n                        obj['Content-Disposition'] = contentDisposition;\r\n                        obj[filename] = filenameValue;\r\n                        obj['Content-Type'] = fileType;\r\n                    })\r\n\r\n\r\n                    // findIndex = data.IndexOfExt(NEWLINE_BYTE, findIndex);\r\n                    let realDataEnd = data.IndexOfExt(boundaryByte, findIndex);\r\n                    let realDataLength = realDataEnd - findIndex - NEWLINE_BYTE.length - NEWLINEONE_BYTE.length;\r\n                    let realDataByte = Buffer.alloc(realDataLength);\r\n\r\n                    data.copy(realDataByte, 0, findIndex + NEWLINE_BYTE.length, findIndex + NEWLINE_BYTE.length+realDataByte.length);\r\n                    findIndex = realDataEnd;\r\n                    obj.Content = realDataByte;\r\n                    if (obj.filename) {\r\n                        obj.Content = realDataByte;\r\n                    }\r\n                    else {\r\n                        obj.Content = realDataByte.toString('utf8');\r\n                    }\r\n                    objList.push(obj);\r\n                }\r\n            }\r\n            //boundary 前还有内容，需要追加到上一个表单数据中\r\n            else {\r\n                //todo\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n        scanIndex = findIndex;\r\n    }\r\n\r\n    return objList;\r\n\r\n}\r\nmodule.exports = FileForm;\r\n"]}