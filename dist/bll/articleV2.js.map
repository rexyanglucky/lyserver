{"version":3,"sources":["../../src/bll/articleV2.js"],"names":["ArticleBll","constructor","dbHelper","DBHelper","saveArticleDraft","data","Promise","resolve","reject","InsertDB","collectionName","callback","result","insertedIds","delArticleDraft","id","DeleteDB","query","_id","getArticleDraft","QueryDB","getArticleDraftList","projection","isMD","createTime","getArticle","getArticleList","param","delArticle","delPromise","then","_updateArticleHistory","catch","err","console","log","_saveArticle","publicArticle","_saveArticleHistory","updateArticle","realid","state","set","UpdateDB","$set","getArticleHistoryList"],"mappings":"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","file":"articleV2.js","sourcesContent":["import DBHelper from \"../db/mongo\"\nimport { ObjectId } from 'mongodb';\n\n\nclass ArticleBll {\n    constructor() {\n        this.dbHelper = new DBHelper();\n    }\n    //#region 草稿操作\n    /**\n     * \n     * @param {Array} data -要保存的文章数据 {title:\"\",content:\"\",author:\"\",createTime:new Date(),updateTime:new Date()}\n     */\n    saveArticleDraft(...data) {\n        return new Promise((resolve, reject) => {\n            this.dbHelper.InsertDB({\n                collectionName: \"articleDraft\", data: data, callback: (result) => {\n                    resolve(result.insertedIds);\n                }\n            });\n        })\n        // this.dbHelper.InsertDB({\n        //     collectionName: \"articleDraft\", data: data, callback: (result) => {\n        //         callback(result.insertedIds);\n        //     }\n        // });\n    }\n    delArticleDraft(...id) {\n        return new Promise((resolve, reject) => {\n            this.dbHelper.DeleteDB({\n                collectionName: \"articleDraft\", query: { _id: ObjectId(id[0]) }, callback: (result) => {\n                    // callback(result);\n                    resolve(result);\n                }\n            })\n        })\n\n    }\n    /**\n     * 根据ID获取草稿箱\n     * @param {*} id \n     */\n    getArticleDraft(...id) {\n        return new Promise((resolve, reject) => {\n            this.dbHelper.QueryDB({\n                collectionName: \"articleDraft\", query: { _id: ObjectId(id[0]) }, callback: (result) => {\n                    // callback(result);\n                    resolve(result);\n                }\n            });\n        })\n    }\n    /**\n     * 获取草稿箱列表\n     * @param {Array} id \n     */\n    getArticleDraftList() {\n        return new Promise((resolve, reject) => {\n            this.dbHelper.QueryDB({\n                collectionName: \"article\", query: {}, projection: { isMD: 0, createTime: 0 }, callback: (result) => {\n                    resolve(result);\n                }\n            });\n        });\n    }\n    //#endregion\n\n    //#region online 文章操作\n    /**\n     * 获取文章\n     * @param {Array} id \n     */\n    getArticle(...id) {\n        return new Promise((resolve, reject) => {\n            this.dbHelper.QueryDB({\n                collectionName: \"article\", query: { _id: ObjectId(id[0]) }, callback: (result) => {\n                    // callback(result);\n                    resolve(result);\n                }\n            });\n        })\n    }\n\n    /**\n     * 获取文章列表\n     * @param {Array} id \n     */\n    //todo 根据post 条件获取列表\n    getArticleList(param) {\n        // let query = { where: {}, sort: {}, page: { currentPage: 1, pageSize: 10 } };\n        // if (param) {\n        //     if (param.author) {\n        //         query.where[author] = param.author;\n        //     }\n        //     if (param.startDate) {\n        //         query.where[crateTime] = { \"$gte\": param.startDate };\n        //     }\n        //     if (param.endDate) {\n        //         query.where[crateTime] = { \"$lte\": param.endDate };\n        //     }\n        //     if (param.currentPage) {\n        //         query.page[currentPage] = param.currentPage;\n        //     }\n        //     if (param.pageSize) {\n        //         query.page[pageSize] = param.pageSize;\n        //     }\n        // }\n\n        return new Promise((resolve, reject) => {\n            this.dbHelper.QueryDB({\n                collectionName: \"article\", query: {}, projection: { isMD: 0, createTime: 0 }, callback: (result) => {\n                    // callback(result);\n                    resolve(result);\n                }\n            });\n        });\n    }\n\n    delArticle(...id) {\n        const delPromise = new Promise((resolve, reject) => {\n            this.dbHelper.DeleteDB({\n                collectionName: \"article\", query: { _id: ObjectId(id[0]) }, callback: (result) => {\n                    resolve()\n                }\n            })\n        }\n        );\n        return delPromise.then(() => { this._updateArticleHistory(id[0]) }).catch(err => {\n            console.log(err);\n        });\n    }\n    /**\n     * 从草稿箱复制数据到文章表 私有\n     * @param {Array} data 文章详情\n     */\n    _saveArticle(data) {\n        return new Promise((resolve, reject) => {\n            this.dbHelper.InsertDB({\n                collectionName: \"article\", data: data, callback: (result) => {\n                    resolve(data);\n                }\n            });\n        })\n\n    }\n    /**\n     * 将指定草稿发布为文章\n     * @param {string} id \n     */\n    publicArticle(...id) {\n        // const data= await this.getArticleDraft(id);\n        // await this.saveArticle(data);\n        // await this.saveArticleHistory(data);\n        // await this.delArticleDraft(id);\n        id = id[0];\n        return this.getArticleDraft(id).then((data) => this._saveArticle(data))\n            .then((data) => { this._saveArticleHistory(data) })\n            .then(() => this.delArticleDraft(id));\n    }\n    /**\n     * 更新文章，点击编辑时触发\n     * @param {string} id \n     */\n    updateArticle(...id) {\n        id = id[0];\n        //将文章复制到草稿箱，并返回数据详情，保存时将原文覆盖\n        return this.getArticle(id)\n            .then((data) => { this.saveArticleDraft(data) })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n    //#endregion\n\n    //#region 文章历史记录相关操作\n    /**\n     * 保存文章历史记录 私有\n     * @param {object} data 文章对象 \n     */\n    _saveArticleHistory(data) {\n        data[0].realid = data[0]._id;\n        data[0].state = 'online';\n        return new Promise((resolve, reject) => {\n            this.dbHelper.InsertDB({\n                collectionName: \"articleHistory\", data: data, callback: (result) => {\n                    resolve();\n                }\n            });\n        })\n\n    }\n\n    /**\n     * 更新文章历史记录 私有\n     * @param {string} realid 与线上文章关联ID \n     * @param {*} set \n     */\n    _updateArticleHistory(realid, set) {\n        return new Promise((resolve, reject) => {\n            this.dbHelper.UpdateDB({\n                collectionName: 'articleHistory',\n                data: { $set: { state: 'offline' } },\n                query: { realid: ObjectId(realid) },\n                callback: (result) => {\n                    resolve(result);\n                }\n            })\n        });\n    }\n    /**\n     * 获取历史文章列表\n     * @param {Array} id \n     */\n    getArticleHistoryList() {\n        return new Promise((resolve, reject) => {\n            this.dbHelper.QueryDB({\n                collectionName: \"articleHistory\", query: {}, projection: { isMD: 0, createTime: 0 }, callback: (result) => {\n                    resolve(result);\n                }\n            });\n        });\n    }\n    //#endregion\n}\nexport default ArticleBll;"]}